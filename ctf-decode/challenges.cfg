#
# ctf-decode
#
# Configuration des challenges
#
# [XXX] Label du challenge, doit être unique, sans contrainte particulière
# name: Home Sweet Home : Nom du challenge tel qu'il apparait sur les pages HTLM
# value: 10 : Nombre de points marqués pour la résolution du challenge
# category: Ghost in the Shell : Catégorie regroupant plusieurs challenges
# flag: flag_{m0n_pr3m13r_fl4g} : format libre
# file: (optionnel) : le nom d'un fichier qui sera téléchargeable par les participants.
# description: 
#    La description peut tenir sur une ou plusieurs lignes.
#    [espace !!] Les lignes de la description doivent commencer par un ESPACE ou une TABULATION
#    Dès qu'une ligne recommence à la première colonne, on a terminé la description
#    Cette description est collée dans du HTML après un passage dans un léger parser Markdown
#    Utiliser la balise </br> pour chaque retour à la ligne
#    Mettre les morçeaux de code ou commande entre deux lignes de ```
#    ```
#    $ commande shell, ou bout de code
#    ```



[Intro]
category: Decode
label: Decode
description: 
    ## Decode    
    </br>
    Pour sécuriser le stockage et le transfert des données, il existe de nombreux codes. Plus ou moins fiables...
    Il est nécessaire de maitriser l'hexadécimal, l'encodage base64, les chiffrement historiques comme le code cesar, les code qui furent fort mais souffrent de faiblesses comme le rsa.




[Challenge_hexa]
name:  Hexadecimal
value: 5
category:  Decode
flag:  31
description: 
    Les ordinateurs codent leurs informations sur des octets qui peuvent prendre une valeur entre 0 et 255.</br>
    Un octet est composé de 8 bits, chacun valant 0 ou 1, que l'on peut grouper deux fois 4 bits.</br>
    0000 0000 vaut 0</br>
    0000 0001 vaut 1</br>
    0000 0010 vaut 2</br>
    0000 0011 vaut 3</br>
    1111 1111 vaut 255.</br>
    Le système hexadécimal est basé 4 bits et permet de compter jusqu'à 16 : 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</br>
    0 = 0  = 0000</br>
    A = 10 = 1010</br>
    B = 11 = 1011</br>
    F = 15 = 1111</br>
    La notation hexadécimale, telle 0x1F, est souvent utilisée pour donner la valeur 'brutes' d'un octet.</br>
    0x00 = 0</br>
    0x01 = 1</br>
    0xFF = 255</br>
    Le flag est la valeur de 0x1F.
    

[Challenge_ascii]
name:  Ascii
value: 5
category:  Decode
flag:  Yolo
description: 
    Les ordinateurs codent leurs informations, sur des octets.</br>
    Un octet peut prendre une valeur entre 0 et 255.</br>
    Le code ascii standardise l'utilisation de ces valeurs.</br>
    [https://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange#/media/File:ASCII-Table-wide.svg]
    Certaines valeurs permettent d'afficher du texte, d'autres de déplacer le curseur à l'écran...</br>
    Le flag est constitué de quatre lettres dont les codes ascii sont : 89 111 108 111</br>
    
    
[Challenge_base64]
name:  Base64
value: 5
category:  Decode
flag:  QUJDRChfI2hqOi04OTNk
description: 
    Un fichier binaire utilise les 255 valeurs des octets.</br> 
    Un fichier texte n'utilise que la sous partie texte du code ascii. 
    L'encodage base64 permet de coder un fichier binaire en n'utilisant que cette sous partie texte.
    Le flag est l'encodage en base64 du bloc ABCD(_#hj:-893d
    ```
    printf 'tralala' | base64
    http://www.utilities-online.info/base64/
    ```
    
    
[Challenge_base64_2]
name:  Base64
value: 5
category:  Decode
flag:  flag_un_s4cr3t_d3c0d3ur
description: 
    Le flag est le decodage de ZmxhZ191bl9zNGNyM3RfZDNjMGQzdXI=
    Le = à la fin n'est pas systématique, mais est caractéristique de l'encodage base64.
    ```
    printf 'dHJhbGFsYQo=' | base64 -d
    http://www.utilities-online.info/base64/
    ```
    

#[Challenge_url]
#name:  URL 
#value: 5
#category:  Decode
#flag:  www.myhackervault.org/backdoor.php?login=admin' or 1=1#
#description: 
#    Le flag est l'url décodée: 
#    ```
#    www.myhackervault.org/backdoor.php%3Flogin%3Dadmin%27%20or%201%3D1%23
#    ```
#    Pro tips: http://www.utilities-online.info/urlencode/
    
    


[Challenge_caesar]
name:  Code Caesar
value: 5
category:  Decode
flag:  flag_Le_code_Caesar_c_est_de_la_balle
description: 
    Le flag est le decodage de iodj_Oh_frgh_Fdhvdu_f_hvw_gh_od_edooh
    Ce code est un code Caesar. On décale les lettres d'un nombre fixe. Ici +3.
    f->i   l->o
    Le site dcode.fr vous permet de voir d'un coup d'oeil toutes les combinaisons.</br>
    Pensez à remettre le flag sous la forme flag_XX_XXx_XX
    ```
    https://www.dcode.fr/caesar-cipher
    ```


[Challenge_caesar_2]
name:  Code Caesar 2
value: 5
category:  Decode
flag:  flag_Le_code_Caesar_c_est_facile_a_casser
description: 
    Le flag est le decodage de ntio_Tm_kwlm_Kimaiz_k_mab_nikqtm_i_kiaamz
    ```
    https://www.dcode.fr/caesar-cipher
    ```






[Challenge_vigenere]
name:  Code Vigenere
value: 5
category:  Decode
flag:  flag_Le_code_Vigenere_c_est_mieux
description: 
    Le flag est le decodage de hefi_Ej_ehig_Onixsgkj_e_xxv_fngnc</br>
    Ce code est un code Vigenere. On décale les lettres d'un nombre egal aux lettres d'une clef. Ici CTF.</br>
    
    f+C-&#62;E </br>   
    l+T-&#62;e   </br>
    a+F-&#62;f   </br>
    ...  </br>
    ```
    https://www.dcode.fr/vigenere-cipher
    Entrez CTF dans 'Knowing the key'
    ```
    Pensez à remettre le flag au format flag_xx_x_xxx


[Challenge_vigenere_2]
name:  Code Vigenere 2
value: 5
category:  Decode
flag:  flag_j_t_ai_casse_du_nord_au_sud
description: 
    Le flag est le decodage de mlcq_q_t_cs_jaucl_dw_xvrf_kb_swn</br>
    Pour casser le code il faut des informations: longueur de la clef, langue utilisée ou mot décodé.</br>
    Ici on peut supposer que FLAG est un mot du message décodé.</br>
    On le saisit dans 'Knowing a plaintext word'</br>
    ```
    https://www.dcode.fr/vigenere-cipher
    ```
    Pensez à remettre le flag au format flag_xx_x_xxx


#[Challenge_weak_rsa]
#name:  Weak RSA
#value: 5
#category:  Decode
#flag:  xxx
#description: 
#    ```
#    https://bentrobotlabs.wordpress.com/2018/08/26/weak-rsa-challenge/
#    ```