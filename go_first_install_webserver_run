#!/bin/bash
#
#


#
# python 2.xx installed
printf "=> Verification : python 2.7 installé : "
if [[ $(which python) ]]; then
    echo "Ok"
    printf "$(python --version)"
  else
    echo "Ko"
    echo "Pour installer python rapidement:"
    echo "sudo apt-get update"
    echo "sudo apt install python-minimal"
    exit;
fi


# Set to 1 to activate ufw firewalling
# The daemon must have sudo without password to set ufw rules
# sudo echo "$USER ALL = NOPASSWD: /usr/sbin/ufw" >> /etc/sudoers
WITH_UFW=1

if [ $WITH_UFW == 1 ] 
then
  echo "WITH_UFW active"
  if [[ $(which ufw) && $(ufw --version) ]]; then
    echo "ufw found"
    printf "$(ufw --version)\n"

    # Check no password
    echo "ufw sudo without passwd : "
    if sudo -l | grep ufw | grep NOPASSaWD; then
        echo "ok"
    else
        echo "ko"
        echo "Pour activer : "
        echo 'sudo echo "$USER ALL = NOPASSWD: /usr/sbin/ufw" >> /etc/sudoers'
    fi
    # Block all incoming
    sudo ufw default deny incoming
    sudo ufw default allow outgoing
    sudo ufw allow 22
    sudo ufw allow 80
    sudo ufw allow 443
    sudo ufw enable
    cd tools/ufw
    python proxy_ufw.py &
    cd -
  else
    echo "Ko"
    echo "Pour installer ufw rapidement:"
    echo "sudo apt-get update"
    echo "sudo apt-get install ufw"
    exit;
  fi
fi
exit


# http://patorjk.com/software/taag/#p=display&f=Small&t=Mon%20Premier%20CTF
echo "
  __  __            ___               _            ___ _____ ___ 
 |  \/  |___ _ _   | _ \_ _ ___ _ __ (_)___ _ _   / __|_   _| __|
 | |\/| / _ \ ' \  |  _/ '_/ -_) '  \| / -_) '_| | (__  | | | _| 
 |_|  |_\___/_||_| |_| |_| \___|_|_|_|_\___|_|    \___| |_| |_| 
"
#############################################################################
#
# System checks
#
echo "= Verification du système..."

#
# system Ubuntu
printf "=> Verification : Ubuntu : "

if uname -a |grep -qw Ubuntu; then 
    echo "Ok"; 
    echo $(uname -v)
else 
    echo "Ko"; 
    echo uname -v
    echo "Les scripts n'ont été testé que sous Ubuntu 18. Ca peut marcher .. ou pas. Bonne chance."
fi

#
# Please avoid running as root or with sudo
printf "=> Verification : Utilisateur non root : "
if [ $(id -u) -eq 0 ]; then 
    echo "Ko"
    echo "Il est recommandé de lancer le script avec un compte utilisateur non root appartenant au groupe Docker."
    echo "Vous etes actuellement root ou dans un sudo."
    echo "Des fichiers ou répertoires risquent d'être créés par root et ne seront plus lisibles/effacables par un utilisateur lambda."
    while true; do
        read -p "Désirez vous continuer en root (o/N) ? : " yn
        case $yn in
            [Oo]* ) echo "Ok, on continue en root"; break;;
            * ) echo "Ok, on arrête ici. Relancez sans sudo ou avec un user non root"; exit;;
        esac
    done
else 
    echo "Ok"
fi


#
# docker-compose installed
printf "=> Verification : docker-compose installé : "
if [[ $(which docker-compose) && $(docker-compose --version) ]]; then
    echo "Ok"
    printf "$(docker-compose --version)\n"
  else
    echo "Ko"
    echo "Pour installer docker-compose rapidement:"
    echo "sudo apt-get update"
    echo "sudo apt-get install docker-compose"
    exit;
fi


#
# Docker installed
printf "=> Verification : Docker installé : "
if [[ $(which docker) && $(docker --version) ]]; then
    echo "Ok"
    printf "$(docker --version)\n"
  else
    echo "Ko"
    echo "Pour installer docker proprement consultez la documentation de votre distribution."
    exit;
fi




#
# zip installed
# Option -D required
printf "=> Verification : zip installé : "
if [[ $(which zip) ]]; then
    echo "Ok"
  else
    echo "Ko"
    echo "Pour installer zip rapidement:"
    echo "sudo apt-get update"
    echo "sudo apt install zip"
    exit;
fi

#
# user in Docker group
printf "=> Verification : Si non root, Utilisateur dans le group Docker : "
if [ $(id -u) -ne 0 ]; then 
    if id -nG $USER | grep -qw "docker"; then
        echo "Ok"
    else
        echo "Ko"
        echo "Si l'utilisateur n'est pas root, il doit appartenir au groupe Docker."
        echo "Utilisez la commande suivant pour ajouter l'utilisateur courant au groupe Docker"
        echo "Ensuite deconnectez et reconnectez vous. Personnellement, je reboote le serveur..."
        echo "sudo gpasswd -a \$USER docker"
        exit;
    fi
else
    echo "Ok"
fi



#
# Is docker running ?
printf "=> Verification : Docker démarré : "
if docker info 2>&1 | grep -qw "Cannot connect to the Docker daemon"; then 
    echo "Ko"
    echo "Vous devriez pouvoir démarrer le service docker avec la commande:"
    echo "sudo service docker start"
    exit;
else
    echo "Ok"
    echo $(docker info 2>/dev/null | grep "Server Version")
fi

#############################################################################
#
# Setup
#


#
# Extract default config   
#
echo "Extracting default config"
if [ -d ctfd_config/tmp ]; then
    rm -R ctfd_config/tmp
fi
mkdir ctfd_config/tmp
unzip -q -d ctfd_config/tmp ctfd_config/empty_conf.zip

#
# Generate CTFd admin password
#


#
# Update config in each challenge directory
#
echo "Mise à jour des fichiers de config propres à chaque challenge"
python -c 'from gen_config import challenges_set_config; challenges_set_config()'

#
# Generate config from challenge directories
#
echo "Generation des fichers de config pour CTFd"
python ./gen_config.py



#
# Copy json files to web server
#
echo "Copying files to web server"
cp -R ./ctfd_config/tmp/* web_server/www_site/yoloctf
chmod -R a+r web_server/www_site/yoloctf



#
# Build challenge-box-provider
#
#cd challenge-box-provider
#docker build -t challenge-box-provider .
#cd - > /dev/null

#
# Creante docker netkorks
# 
docker network create webserver_webLAN


#
# Build ctf-sshd
#
echo "Building ctf-sshd image"
cd tools/ctf-sshd
docker build -t ctf-sshd .
cd - > /dev/null


#
# Build xtermjs
#
echo "Building ctf-tools-xtermjs image"
cd tools/xterm
./go_xterm
cd - > /dev/null
cd tools/xterm/xterm.js-3.13.0/
docker-compose build
cd - > /dev/null


#
# Build dockers images for challenges
#
python -c 'from gen_config import build_challenges; build_challenges()'
#python -c 'from gen_config import start_challenges; start_challenges()'


#
# Generate self-signed certificates
#
cd web_server
./go_gen_certs
cd - > /dev/null


#
# Start web_server
#
cd web_server
docker-compose build
docker-compose up -d
cd - > /dev/null

#
# Start challenge box provider
#
cd tools/challenge-box-provider
docker-compose up -d
cd - > /dev/null


# Start static challenges
#
cd ctf-sqli
docker-compose up -d
cd - > /dev/null



#
# Logs
#
# docker-compose logs
# docker stats

echo "*****************"
echo ""
echo "S'il n'y a pas eu de message d'erreur, vous pouvez à présent vous connecter à l'interface web:"
echo "http://localhost/yoloctf/"
echo ""
echo "Commandes utiles:"
echo "docker stats"
echo "docker-compose logs"

