#
# ctf-passwd
#
# Configuration des challenges
#
# [XXX] Label du challenge, doit être unique, sans contrainte particulière
# name: Home Sweet Home : Nom du challenge tel qu'il apparait sur les pages HTLM
# value: 10 : Nombre de points marqués pour la résolution du challenge
# category: Ghost in the Shell : Catégorie regroupant plusieurs challenges
# flag: flag_{m0n_pr3m13r_fl4g} : format libre
# file: (optionnel) : le nom d'un fichier qui sera téléchargeable par les participants.
# description: 
#    La description peut tenir sur une ou plusieurs lignes.
#    [espace !!] Les lignes de la description doivent commencer par un ESPACE ou une TABULATION
#    Dès qu'une ligne recommence à la première colonne, on a terminé la description
#    Cette description est collée dans du HTML après un passage dans un léger parser Markdown
#    Utiliser la balise </br> pour chaque retour à la ligne
#    Mettre les morçeaux de code ou commande entre deux lignes de ```
#    ```
#    $ commande shell, ou bout de code
#    ```

[Intro]
category: Password
label: Password
description: 
    ## Passwords
    </br>
    Vous êtes face à la page de connection d'un site web. </br>
    On vous demande un login/mot de passe que vous ne connaissez pas. </br>
    </br>
    Heureusement le nom suit souvent des règles (initiale puis nom, prenom.nom,..) et le mot de passe a été choisi par quelqu'un qui cherchait surtout un moyen de s'en souvenir... et l'aura basé sur le prénom de ses enfants, le modèle de sa voiture, ou son actrice favorite.
    Avec un peu d'info et de méthode, ça se retrouve vite.
    Des dictionnaires de mots de passe, issus de hacking de grosses entreprise existent, tel Rockyou.txt avec des mots de passe triés par fréquence d'utilisation. Eviter 123456...
    Souvent, les équipments sont livrés avec des comptes par défaut. Là aussi des listes existent.




[Challenge_1]
name:  Une affaire de famille
value: 1
category:  Password
flag:  martinique
description: 
    Jean Bon vient de monter sa startup spécialisée dans la vente de sabres lasers.</br> 
    Il a passé la soirée à consolider ses commandes, en pensant à ses dernières vacances en Martinique.</br>
    Avant de rentrer, regarder le dernier épisode de Game of Throne, il sauvegarde ses documents dans un zip chiffré sur une clef usb.</br>
    Quand winzip lui demande un mot de passe, sans contrainte particulière, il a un souvenir d'une vague formation en sécurité, et il entre rapidement un mot de passe de plus de 8 lettres facile à retrouver.</br></br>
    Le flag est le mot de passe qu'il va utiliser. 
    


[Challenge_2]
name:  Au boulot
value: 2
category:  Password
flag:  Martinique
description: 
    Les affaires décollent, Jean peut se permettre prendre Jar Jar en stage pour développer une solution de gestion de stock adaptée aux sabres laser en php.</br>
    Jar Jar trouve rapidement un super code sur github, et l'installe sans tarder.</br>
    Au moment de créer son compte, Jean découvre avec énervement que le logiciel refuse de créer son compte s'il n'y a pas de lettre majuscule dans le mot de passe.</br></br>
    Le flag est le mot de passe que Jean va utiliser.




[Challenge_3]
name:  Une politique de sécurité forte
value: 3
category:  Password
flag:  Martinique$
description: 
    Le logiciel de gestion de stock marche plutôt bien. Jar Jar, se dit qu'il est temps de penser à le sécuriser un peu.</br>
    Il décide de renforcer la sécurité en forcant l'utilisation d'un caractère spécial dans le mot de passe.</br>
    Pendant ce temps Jean, focalisé sur le marché américain et la conversion euro/dollars, ne se doute pas qu'il va devoir bientôt changer son mot de passe. </br></br>
    Le flag est le futur mot de passe que Jean va utiliser.


[Challenge_default]
name:  Au boulot
value: 10
category:  Password
flag:  Flag_C3st_0ouv3rt
description: 
    Au vu des besoins croissants, Jar Jar se voit contraint de migrer vers un progicel plus adapté. Il l'installe et part en week-end.</br>
    ```
    https://{IP_SERVER}/password/index.php
    ```
    </br>
    Au moment de se connecter, Jean réalise qu'il n'a aucune idée du login/password utilisé par Jar Jar. </br>
    Il va chercher sur internet des couples login/password par défaut connus sur le git https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ 
    </br>
    Il ouvre <code>mysql-betterdefaultpasslist.txt</code> et il teste à la main...
    </br></br>
    Note pour plus tard... Les constructeurs ont souvent leurs propres mots de passe par défaut. Une petite liste est dispo dans le fichier default-passwords.csv du même github. Utile quand on récupère un vieux routeur ou une instalaltion par défaut d'un serveur Tomcat...

    

[Challenge_hydre]
name:  Au boulot
value: 15
category:  Password
flag:  Flag_C0mm3_d4ns_un_m0ul1n
description: 
    Le logiciel n'étant pas adapté, Jar Jar en installe un autre et part en vacances.

    ```
    https://{IP_SERVER}/password/index_hydra.php
    ``` 
    </br>
    Au moment de se connecter, Jean réalise qu'il n'a, cette fois encore, aucune idée du login/password utilisé par Jar Jar. </br>
    Il n'a pas envie de se taper une nouvelle liste à la main, et décide d'automatiser la saisie des mots de passe avec THC Hydra.</br></br>
    </br>
    Il fait un click droit sur la page d'authentification du site web et regarde le code HTML.
    </br>
    Il en déduit la méthode (get/post) d'envoie des données par la page web vers le serveur, et les nom des champs utilisés.</br>

    ```
    <form action=""  method="post"> ==> Méthode POST
    <input type="text" class="form-control" id="login" name="login"> ==> champ login
    <input type="password" class="form-control" id="password" name="password"> ==> champ password
    ```
    </br>

    Il lance une kali et récupère deux fichiers unix_users.txt et unix_passwords.txt qui sont rangés avec d'autres dictionnaires de mots de passe dans <code>/usr/share/wordlists/metasploit/</code>.


    Il commence à lire la description de THC-Hydra en [https://github.com/vanhauser-thc/thc-hydra](https://github.com/vanhauser-thc/thc-hydra) pour savoir le configurer.</br></br>


    ```
    hydra {IP_SERVER} \
    https-form-post \
    "/password/index_hydra.php\
    :login=^USER^&password=^PASS^\
    :Authentification"\
    -L unix_users.txt -P unix_passwords.txt \
    -I -vvvv -f
    ```

    ```
    {IP_SERVER}                  : notre serveur</br>
    https-form-post              : https et post</br>
    /password/index_hydra.php    : url à tester</br>
    login=^USER^&password=^PASS^ : les parametres à tester avec les fichiers Users et Passwords</br>
    -L unix_users.txt            : fichier contenant la liste des logins</br>
    -P unix_passwords.txt        : fichier contenant la liste des mots de passe</br>
    Authentification             : message présent sur la page en cas d'echec de l'authentification</br>
    -v                           : Verbose
    -f                           : Une fois un login/password trouvé arréter de chercher
    ```
    </br></br>
    Dans un CTF, les serveurs sont configurés pour limiter le débit des requètes et ne pas se retrouver à genoux sous la charge. </br>
    Généralement, on n'aime pas le bruteforce.</br>
    Si le mot de passe ne sort pas très vite avec les listes par 'défaut', c'est que ce n'est pas la bonne méthode.</br>
    Sur du ssh, le serveur va souvent être configuré pour 2 tentatives par seconde max... Impec pour du manuel, pas terrible pour du brute force...

    
