#
# ctf-passwd
#
# Configuration des challenges
#
# [XXX] Label du challenge, doit être unique, sans contrainte particulière
# name: Home Sweet Home : Nom du challenge tel qu'il apparait sur les pages HTLM
# value: 10 : Nombre de points marqués pour la résolution du challenge
# category: Ghost in the Shell : Catégorie regroupant plusieurs challenges
# flag: flag_{m0n_pr3m13r_fl4g} : format libre
# file: (optionnel) : le nom d'un fichier qui sera téléchargeable par les participants.
# description: 
#    La description peut tenir sur une ou plusieurs lignes.
#    [espace !!] Les lignes de la description doivent commencer par un ESPACE ou une TABULATION
#    Dès qu'une ligne recommence à la première colonne, on a terminé la description
#    Cette description est collée dans du HTML après un passage dans un léger parser Markdown
#    Utiliser la balise </br> pour chaque retour à la ligne
#    Mettre les morçeaux de code ou commande entre deux lignes de ```
#    ```
#    $ commande shell, ou bout de code
#    ```




[Challenge_1]
name:  Une affaire de famille
value: 1
category:  Password
flag:  martinique
description: 
    Jean Bon vient de monter sa startup spécialisée dans la vente de sabres lasers. 
    Il vient de passer la soirée à consolider ses commandes, en pensant à ses dernières vacances en Martinique.
    Avant de rentrer, regarder le dernier épisode de Game of Throne, il sauvegarde ses documents dans un zip chiffré sur une clef usb.</br>
    Quand winzip lui demande un mot de passe, sans contrainte particulière, il a un souvenir d'une vague formation en sécurité, et il entre rapidement un mot de passe de plus de 8 lettres facile à retrouver.
    Le flag est le mot de passe qu'il va utiliser. 
    


[Challenge_2]
name:  Au boulot
value: 2
category:  Password
flag:  Martinique
description: 
    Les affaires décollent, Jean peut se permettre prender Jar Jar en stage pour développer une solution de gestion de stock adaptée aux sabres laser en php.
    Jar Jar a trouvé un super code sur github, et l'installe sans tarder.
    Au moment de créer son compte, Jean découvre avec énervement que le logiciel refuse de créer son compte s'il n'y a pas de lettre majuscule dans le mot de passe.
    Le flag est le mot de passe que Jean va utiliser.




[Challenge_3]
name:  Une politique de sécurité forte
value: 3
category:  Password
flag:  Martinique$
description: 
    Le logiciel de gestion de stock marche pluto bien. Jar Jar, se dit qu'il est temps de penser à le sécuriser un peu.
    Il décide de renforcer la sécurité en forcant l'utilisation d'un caractère spécial dans le mot de passe.
    Pendant ce temps Jean est focalisé sur le marché américain et la conversion euro/dollars. 
    Le flag est le mot de passe que Jean va utiliser.


[Challenge_default]
name:  Au boulot
value: 2
category:  Password
flag:  Luke
description: 
    Au vu des besoins croissants, Jar Jar est obligé de migrer vers un progicel plus adapté.
    ```
    https://{IP_SERVER}/sqli/login_default.php
    ```
    Au moment de se connecter, Jean réalise qu'il n'a aucune idée du login/password utilisé par Jar Jar. </br>
    Il va chercher sur internet des couples login/password par défaut connus sur le git https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/ 

    Il ouvre mysql-betterdefaultpasslist.txt et il teste...

    

[Challenge_hydre]
name:  Au boulot
value: 2
category:  Password
flag:  Luke
description: 
    Le logiciel n'est pas adapté, Jar Jar en installe un autre et part en vacances.
    ```
    https://{IP_SERVER}/sqli/login_hydra.php
    ```
    Au moment de se connecter, Jean réalise qu'il n'a cette fois encore aucune idée du login/password utilisé par Jar Jar. </br>
    Il n'a pas envie de se taper une nouvelle liste à la main, et sort l'artillerie lourde.

    Il fait un click droit sur la page d'authentification et regarde le code HTML:
    ```
    view-source:https://localhost/password/index.php
    ```
    <form action=""  method="post"> : Méthode POST
    <input type="text" class="form-control" id="login" name="login">:  login
    <input type="password" class="form-control" id="password" name="password">:  password
    Il récupère des listes de login et password sur git, et commence à lire la description de THC-Hydra
    ```
    https://github.com/vanhauser-thc/thc-hydra
    ```

    user.txt et passwd.txt sont dans le répertoire tools.
    Sur une kali, on des dictionnaires de mots passe dans /usr/share/wordlists/
    ```
    hydra {IP_SERVER}/ http-form-post "/sqli/login_hydra.php:login=^USER^&password=^PASS^:Authentification" -L users.txt -P pass.txt -t 10 -w 30 -o hydra-http-post-attack.txt
    ```

    Serveur = {IP_SERVER}</br>
    Method = http-form-post</br>
    Url = /sqli/login_hydra.php</br>
    Form parameters = login=^USER^&password=^PASS^</br>
    Failure response = Authentification</br>
    Users file = users.txt</br>
    Password file = pass.txt</br>
    Threads = -t 10</br>
    Wait for timeout = -w 30</br>
    Output file = -o hydra-http-post-attack.txt</br>

    
