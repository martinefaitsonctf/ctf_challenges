#
# ctf-buffer
#
# Configuration des challenges
#
# [XXX] Label du challenge, doit être unique, sans contrainte particulière
# name: Home Sweet Home : Nom du challenge tel qu'il apparait sur les pages HTLM
# value: 10 : Nombre de points marqués pour la résolution du challenge
# category: Ghost in the Shell : Catégorie regroupant plusieurs challenges
# flag: flag_{m0n_pr3m13r_fl4g} : format libre
# file: (optionnel) : le nom d'un fichier qui sera téléchargeable par les participants.
# description: 
#    La description peut tenir sur une ou plusieurs lignes.
#    [espace !!] Les lignes de la description doivent commencer par un ESPACE ou une TABULATION
#    Dès qu'une ligne recommence à la première colonne, on a terminé la description
#    Cette description est collée dans du HTML après un passage dans un léger parser Markdown
#    Utiliser la balise </br> pour chaque retour à la ligne
#    Mettre les morçeaux de code ou commande entre deux lignes de ```
#    ```
#    $ commande shell, ou bout de code
#    ```



[Intro]
category: Python
label: Python
docker: ctf-python
description: 
    ## Python
    .
    Pour automatiser les exploits, il faut maitriser un langage. Python est un bon candidat.

    
    


[Challenge_1]
name:  Hello World
value: 1
file:  hello.py
category:  Python
flag:  flag_Y0l0_rules
description: 
    Allez sur https://{IP_SERVER}/IPSERVER/index.html
    Copiez le code suivant
    ```
    print "Hello world"
    ```
    Clickez sur Go pour executer votre code.
    Le flag sera généré quand vous afficherez 'Hello Yolo'


